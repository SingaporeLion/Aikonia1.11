package com.aikonia.app;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.aikonia.app.data.repository.ChatRepositoryImpl;
import com.aikonia.app.data.repository.ConversationRepositoryImpl;
import com.aikonia.app.data.repository.FirebaseRepositoryImpl;
import com.aikonia.app.data.repository.MessageRepositoryImpl;
import com.aikonia.app.data.repository.PreferenceRepositoryImpl;
import com.aikonia.app.data.source.local.ConversAIDao;
import com.aikonia.app.data.source.local.ConversAIDatabase;
import com.aikonia.app.data.source.local.UserDao;
import com.aikonia.app.data.source.local.UserRepository;
import com.aikonia.app.data.source.remote.ConversAIService;
import com.aikonia.app.di.FirebaseModule;
import com.aikonia.app.di.FirebaseModule_FirestoreInstanceFactory;
import com.aikonia.app.di.NetworkModule;
import com.aikonia.app.di.NetworkModule_ProvideConversAIServiceFactory;
import com.aikonia.app.di.NetworkModule_ProvideOkHttpClientFactory;
import com.aikonia.app.di.NetworkModule_ProvideRetrofitFactory;
import com.aikonia.app.di.RoomDbModule;
import com.aikonia.app.di.RoomDbModule_ProvideConversAIDaoFactory;
import com.aikonia.app.di.RoomDbModule_ProvideRoomDbFactory;
import com.aikonia.app.di.RoomDbModule_ProvideUserDaoFactory;
import com.aikonia.app.di.RoomDbModule_ProvideUserRepositoryFactory;
import com.aikonia.app.di.SharedPreferenceModule;
import com.aikonia.app.di.SharedPreferenceModule_ProvideSharedPreferencesFactory;
import com.aikonia.app.domain.use_case.app.IsThereUpdateUseCase;
import com.aikonia.app.domain.use_case.conversation.CreateConversationUseCase;
import com.aikonia.app.domain.use_case.conversation.DeleteAllConversationUseCase;
import com.aikonia.app.domain.use_case.conversation.DeleteConversationUseCase;
import com.aikonia.app.domain.use_case.conversation.GetConversationsUseCase;
import com.aikonia.app.domain.use_case.language.GetCurrentLanguageCodeUseCase;
import com.aikonia.app.domain.use_case.language.GetCurrentLanguageUseCase;
import com.aikonia.app.domain.use_case.language.SetCurrentLanguageCodeUseCase;
import com.aikonia.app.domain.use_case.language.SetCurrentLanguageUseCase;
import com.aikonia.app.domain.use_case.message.CreateMessagesUseCase;
import com.aikonia.app.domain.use_case.message.GetMessagesUseCase;
import com.aikonia.app.domain.use_case.message.TextCompletionsWithStreamUseCase;
import com.aikonia.app.domain.use_case.profile.GetDarkModeUseCase;
import com.aikonia.app.domain.use_case.profile.SetDarkModeUseCase;
import com.aikonia.app.domain.use_case.upgrade.IsProVersionUseCase;
import com.aikonia.app.domain.use_case.upgrade.SetFirstTimeUseCase;
import com.aikonia.app.domain.use_case.upgrade.SetProVersionUseCase;
import com.aikonia.app.ui.activity.MainActivity;
import com.aikonia.app.ui.activity.MainActivityViewModel;
import com.aikonia.app.ui.activity.MainActivityViewModel_HiltModules_KeyModule_ProvideFactory;
import com.aikonia.app.ui.activity.MainActivity_MembersInjector;
import com.aikonia.app.ui.chat.ChatViewModel;
import com.aikonia.app.ui.chat.ChatViewModel_HiltModules_KeyModule_ProvideFactory;
import com.aikonia.app.ui.history.HistoryViewModel;
import com.aikonia.app.ui.history.HistoryViewModel_HiltModules_KeyModule_ProvideFactory;
import com.aikonia.app.ui.language.LanguageViewModel;
import com.aikonia.app.ui.language.LanguageViewModel_HiltModules_KeyModule_ProvideFactory;
import com.aikonia.app.ui.settings.SettingsViewModel;
import com.aikonia.app.ui.settings.SettingsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.aikonia.app.ui.startchat.StartChatViewModel;
import com.aikonia.app.ui.startchat.StartChatViewModel_HiltModules_KeyModule_ProvideFactory;
import com.aikonia.app.ui.upgrade.UpgradeViewModel;
import com.aikonia.app.ui.upgrade.UpgradeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.aikonia.app.ui.welcome.WelcomeScreenViewModel;
import com.aikonia.app.ui.welcome.WelcomeScreenViewModel_HiltModules_KeyModule_ProvideFactory;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.firebase.firestore.FirebaseFirestore;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import java.util.Map;
import java.util.Set;
import javax.annotation.processing.Generated;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerConversAIApp_HiltComponents_SingletonC {
  private DaggerConversAIApp_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private RoomDbModule roomDbModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder firebaseModule(FirebaseModule firebaseModule) {
      Preconditions.checkNotNull(firebaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder roomDbModule(RoomDbModule roomDbModule) {
      this.roomDbModule = Preconditions.checkNotNull(roomDbModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder sharedPreferenceModule(SharedPreferenceModule sharedPreferenceModule) {
      Preconditions.checkNotNull(sharedPreferenceModule);
      return this;
    }

    public ConversAIApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (roomDbModule == null) {
        this.roomDbModule = new RoomDbModule();
      }
      return new SingletonCImpl(applicationContextModule, roomDbModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements ConversAIApp_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ConversAIApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements ConversAIApp_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public ConversAIApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements ConversAIApp_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public ConversAIApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements ConversAIApp_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ConversAIApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements ConversAIApp_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ConversAIApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements ConversAIApp_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public ConversAIApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements ConversAIApp_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public ConversAIApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends ConversAIApp_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends ConversAIApp_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends ConversAIApp_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends ConversAIApp_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
      injectMainActivity2(mainActivity);
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(ChatViewModel_HiltModules_KeyModule_ProvideFactory.provide(), HistoryViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LanguageViewModel_HiltModules_KeyModule_ProvideFactory.provide(), MainActivityViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SettingsViewModel_HiltModules_KeyModule_ProvideFactory.provide(), StartChatViewModel_HiltModules_KeyModule_ProvideFactory.provide(), UpgradeViewModel_HiltModules_KeyModule_ProvideFactory.provide(), WelcomeScreenViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity2(MainActivity instance) {
      MainActivity_MembersInjector.injectUserRepository(instance, singletonCImpl.provideUserRepositoryProvider.get());
      MainActivity_MembersInjector.injectConversationRepository(instance, singletonCImpl.conversationRepositoryImpl());
      return instance;
    }
  }

  private static final class ViewModelCImpl extends ConversAIApp_HiltComponents.ViewModelC {
    private final SavedStateHandle savedStateHandle;

    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ChatViewModel> chatViewModelProvider;

    private Provider<HistoryViewModel> historyViewModelProvider;

    private Provider<LanguageViewModel> languageViewModelProvider;

    private Provider<MainActivityViewModel> mainActivityViewModelProvider;

    private Provider<SettingsViewModel> settingsViewModelProvider;

    private Provider<StartChatViewModel> startChatViewModelProvider;

    private Provider<UpgradeViewModel> upgradeViewModelProvider;

    private Provider<WelcomeScreenViewModel> welcomeScreenViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.savedStateHandle = savedStateHandleParam;
      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    private TextCompletionsWithStreamUseCase textCompletionsWithStreamUseCase() {
      return new TextCompletionsWithStreamUseCase(singletonCImpl.chatRepositoryImpl());
    }

    private CreateMessagesUseCase createMessagesUseCase() {
      return new CreateMessagesUseCase(singletonCImpl.messageRepositoryImpl());
    }

    private GetMessagesUseCase getMessagesUseCase() {
      return new GetMessagesUseCase(singletonCImpl.messageRepositoryImpl());
    }

    private CreateConversationUseCase createConversationUseCase() {
      return new CreateConversationUseCase(singletonCImpl.conversationRepositoryImpl());
    }

    private GetConversationsUseCase getConversationsUseCase() {
      return new GetConversationsUseCase(singletonCImpl.conversationRepositoryImpl());
    }

    private DeleteConversationUseCase deleteConversationUseCase() {
      return new DeleteConversationUseCase(singletonCImpl.conversationRepositoryImpl());
    }

    private DeleteAllConversationUseCase deleteAllConversationUseCase() {
      return new DeleteAllConversationUseCase(singletonCImpl.conversationRepositoryImpl());
    }

    private GetDarkModeUseCase getDarkModeUseCase() {
      return new GetDarkModeUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private GetCurrentLanguageCodeUseCase getCurrentLanguageCodeUseCase() {
      return new GetCurrentLanguageCodeUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private SetCurrentLanguageCodeUseCase setCurrentLanguageCodeUseCase() {
      return new SetCurrentLanguageCodeUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private SetCurrentLanguageUseCase setCurrentLanguageUseCase() {
      return new SetCurrentLanguageUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private SetFirstTimeUseCase setFirstTimeUseCase() {
      return new SetFirstTimeUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private SetDarkModeUseCase setDarkModeUseCase() {
      return new SetDarkModeUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private GetCurrentLanguageUseCase getCurrentLanguageUseCase() {
      return new GetCurrentLanguageUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private IsProVersionUseCase isProVersionUseCase() {
      return new IsProVersionUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private SetProVersionUseCase setProVersionUseCase() {
      return new SetProVersionUseCase(singletonCImpl.preferenceRepositoryImpl());
    }

    private IsThereUpdateUseCase isThereUpdateUseCase() {
      return new IsThereUpdateUseCase(singletonCImpl.firebaseRepositoryImpl());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.chatViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.historyViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.languageViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.mainActivityViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.settingsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.startChatViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.upgradeViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.welcomeScreenViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>builderWithExpectedSize(8).put("com.aikonia.app.ui.chat.ChatViewModel", ((Provider) chatViewModelProvider)).put("com.aikonia.app.ui.history.HistoryViewModel", ((Provider) historyViewModelProvider)).put("com.aikonia.app.ui.language.LanguageViewModel", ((Provider) languageViewModelProvider)).put("com.aikonia.app.ui.activity.MainActivityViewModel", ((Provider) mainActivityViewModelProvider)).put("com.aikonia.app.ui.settings.SettingsViewModel", ((Provider) settingsViewModelProvider)).put("com.aikonia.app.ui.startchat.StartChatViewModel", ((Provider) startChatViewModelProvider)).put("com.aikonia.app.ui.upgrade.UpgradeViewModel", ((Provider) upgradeViewModelProvider)).put("com.aikonia.app.ui.welcome.WelcomeScreenViewModel", ((Provider) welcomeScreenViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.aikonia.app.ui.chat.ChatViewModel 
          return (T) new ChatViewModel(viewModelCImpl.textCompletionsWithStreamUseCase(), viewModelCImpl.createMessagesUseCase(), viewModelCImpl.getMessagesUseCase(), viewModelCImpl.createConversationUseCase(), viewModelCImpl.savedStateHandle, singletonCImpl.provideUserRepositoryProvider.get(), singletonCImpl.provideConversAIServiceProvider.get());

          case 1: // com.aikonia.app.ui.history.HistoryViewModel 
          return (T) new HistoryViewModel(viewModelCImpl.getConversationsUseCase(), viewModelCImpl.deleteConversationUseCase(), viewModelCImpl.deleteAllConversationUseCase(), viewModelCImpl.getDarkModeUseCase());

          case 2: // com.aikonia.app.ui.language.LanguageViewModel 
          return (T) new LanguageViewModel(viewModelCImpl.getCurrentLanguageCodeUseCase(), viewModelCImpl.setCurrentLanguageCodeUseCase(), viewModelCImpl.setCurrentLanguageUseCase());

          case 3: // com.aikonia.app.ui.activity.MainActivityViewModel 
          return (T) new MainActivityViewModel(viewModelCImpl.getDarkModeUseCase(), viewModelCImpl.getCurrentLanguageCodeUseCase(), viewModelCImpl.setFirstTimeUseCase(), singletonCImpl.conversationRepositoryImpl());

          case 4: // com.aikonia.app.ui.settings.SettingsViewModel 
          return (T) new SettingsViewModel(viewModelCImpl.setDarkModeUseCase(), viewModelCImpl.getCurrentLanguageUseCase(), viewModelCImpl.isProVersionUseCase(), viewModelCImpl.setProVersionUseCase());

          case 5: // com.aikonia.app.ui.startchat.StartChatViewModel 
          return (T) new StartChatViewModel(singletonCImpl.provideUserRepositoryProvider.get(), viewModelCImpl.isProVersionUseCase(), viewModelCImpl.isThereUpdateUseCase(), viewModelCImpl.getCurrentLanguageCodeUseCase(), singletonCImpl.sharedPreferences());

          case 6: // com.aikonia.app.ui.upgrade.UpgradeViewModel 
          return (T) new UpgradeViewModel(viewModelCImpl.setProVersionUseCase());

          case 7: // com.aikonia.app.ui.welcome.WelcomeScreenViewModel 
          return (T) new WelcomeScreenViewModel(singletonCImpl.provideUserRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends ConversAIApp_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends ConversAIApp_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends ConversAIApp_HiltComponents.SingletonC {
    private final RoomDbModule roomDbModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<ConversAIDatabase> provideRoomDbProvider;

    private Provider<UserDao> provideUserDaoProvider;

    private Provider<UserRepository> provideUserRepositoryProvider;

    private Provider<ConversAIDao> provideConversAIDaoProvider;

    private Provider<OkHttpClient> provideOkHttpClientProvider;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<ConversAIService> provideConversAIServiceProvider;

    private Provider<FirebaseFirestore> firestoreInstanceProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        RoomDbModule roomDbModuleParam) {
      this.roomDbModule = roomDbModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(applicationContextModuleParam, roomDbModuleParam);

    }

    private SharedPreferences sharedPreferences() {
      return SharedPreferenceModule_ProvideSharedPreferencesFactory.provideSharedPreferences(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
    }

    private ConversationRepositoryImpl conversationRepositoryImpl() {
      return new ConversationRepositoryImpl(provideConversAIDaoProvider.get());
    }

    private ChatRepositoryImpl chatRepositoryImpl() {
      return new ChatRepositoryImpl(provideConversAIServiceProvider.get());
    }

    private MessageRepositoryImpl messageRepositoryImpl() {
      return new MessageRepositoryImpl(provideConversAIDaoProvider.get());
    }

    private PreferenceRepositoryImpl preferenceRepositoryImpl() {
      return new PreferenceRepositoryImpl(sharedPreferences(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
    }

    private FirebaseRepositoryImpl firebaseRepositoryImpl() {
      return new FirebaseRepositoryImpl(firestoreInstanceProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final RoomDbModule roomDbModuleParam) {
      this.provideRoomDbProvider = DoubleCheck.provider(new SwitchingProvider<ConversAIDatabase>(singletonCImpl, 2));
      this.provideUserDaoProvider = DoubleCheck.provider(new SwitchingProvider<UserDao>(singletonCImpl, 1));
      this.provideUserRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<UserRepository>(singletonCImpl, 0));
      this.provideConversAIDaoProvider = DoubleCheck.provider(new SwitchingProvider<ConversAIDao>(singletonCImpl, 3));
      this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonCImpl, 6));
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 5));
      this.provideConversAIServiceProvider = DoubleCheck.provider(new SwitchingProvider<ConversAIService>(singletonCImpl, 4));
      this.firestoreInstanceProvider = DoubleCheck.provider(new SwitchingProvider<FirebaseFirestore>(singletonCImpl, 7));
    }

    @Override
    public void injectConversAIApp(ConversAIApp conversAIApp) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return ImmutableSet.<Boolean>of();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.aikonia.app.data.source.local.UserRepository 
          return (T) RoomDbModule_ProvideUserRepositoryFactory.provideUserRepository(singletonCImpl.roomDbModule, singletonCImpl.provideUserDaoProvider.get(), singletonCImpl.sharedPreferences());

          case 1: // com.aikonia.app.data.source.local.UserDao 
          return (T) RoomDbModule_ProvideUserDaoFactory.provideUserDao(singletonCImpl.roomDbModule, singletonCImpl.provideRoomDbProvider.get());

          case 2: // com.aikonia.app.data.source.local.ConversAIDatabase 
          return (T) RoomDbModule_ProvideRoomDbFactory.provideRoomDb(singletonCImpl.roomDbModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // com.aikonia.app.data.source.local.ConversAIDao 
          return (T) RoomDbModule_ProvideConversAIDaoFactory.provideConversAIDao(singletonCImpl.roomDbModule, singletonCImpl.provideRoomDbProvider.get());

          case 4: // com.aikonia.app.data.source.remote.ConversAIService 
          return (T) NetworkModule_ProvideConversAIServiceFactory.provideConversAIService(singletonCImpl.provideRetrofitProvider.get());

          case 5: // retrofit2.Retrofit 
          return (T) NetworkModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.provideOkHttpClientProvider.get());

          case 6: // okhttp3.OkHttpClient 
          return (T) NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient();

          case 7: // com.google.firebase.firestore.FirebaseFirestore 
          return (T) FirebaseModule_FirestoreInstanceFactory.firestoreInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
